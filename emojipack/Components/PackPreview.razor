@*<h3>PackPreview</h3>*@

<div id="@(IsSelected?"pack2":"pack")">
    <div class="d-flex" style="margin: auto; margin-top: 5px; width: 100%; padding-right: 5px;">
        <div id="box" @onclick="@Selected">
            <img id="packImage" src="@CurrentPack.GetEmojiPreviewSource().Result" />
        </div>
        <MudText @onclick="@Selected" Typo="Typo.body2" Style="margin: auto; cursor: pointer">@CurrentPack.PackName</MudText>

        <MudMenu OffsetX="true" Direction="Direction.Left" Icon="@Icons.Filled.MoreVert" Size="Size.Medium" Color="Color.Tertiary">
            <MudMenuItem OnClick="@(() => { RenameVisible = true; newName = CurrentPack.PackName; })">
                Rename Pack
            </MudMenuItem>
            <MudMenuItem OnClick="@(() => { DeleteVisible = true;})">
                Delete Pack
            </MudMenuItem>
            <MudMenuItem OnClick="@(async () => await CurrentPack.ChangeVisibility(!CurrentPack.Visibility))">
                @if (CurrentPack.Visibility)
                {
                    <p>
                        Make Private
                    </p>
                }
                else
                {
                    <p>
                        Make Public
                    </p>
                }
            </MudMenuItem>
        </MudMenu>
    </div>
</div>

<MudDialog @bind-IsVisible="RenameVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Rename Pack
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextFieldString @bind-Value="newName" Label="New Name"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Rename" Class="px-5">Rename</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => {RenameVisible = false;})" Class="px-5">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="DeleteVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Delete Emoji Pack
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.body1">
            Are you sure you want to delete this emoji pack? This action is irreversible.
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="Delete" Class="px-5">Delete</MudButton>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => {DeleteVisible = false;})" Class="px-5">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<style>
    #pack {
        margin: 5px 0 5px 0;
        
    }
    #pack2 {
        background: var(--background);
        margin: 5px 0 5px 0;
    }
    #box {
        width: 60px;
        height: 60px;
        background: var(--backgroundGrey);
        margin: 5px;
        border-radius: 5px;
        display: inline-block;
        padding: 5px;
        position: relative;
        cursor: pointer;
    }
    #pack:hover {
        background: var(--background);
        margin: 5px 0 5px 0;
    }
    #packImage {
        height: 50px;
        width: 50px;
        object-fit: cover;
    }
</style>

@code {
    [Parameter]
    public Pack CurrentPack { get; set; }

    public bool IsSelected = false;

    protected override void OnInitialized()
    {
        EventService.SelectPackChangedEvent += (x) =>
        {
            if (x == CurrentPack)
            {
                IsSelected = true;
                StateHasChanged();
            }
            else
            {
                if (IsSelected)
                {
                    IsSelected = false;
                    StateHasChanged();
                }
            }
        };
    }

    private void Selected()
    {
        EventService.SelectedPack = CurrentPack;
        EventService.InvokeSelectPackChangedEvent(CurrentPack);
    }

    private bool RenameVisible;
    private string newName;

    private async Task Rename(MouseEventArgs obj)
    {
        await CurrentPack.RenamePack(newName);
        RenameVisible = false;
    }

    private bool DeleteVisible;

    private async Task Delete(MouseEventArgs obj)
    {
        await AuthService.User.DeletePack(CurrentPack);
        DeleteVisible = false;
    }

}
